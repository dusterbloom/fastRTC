[tool:pytest]
# Pytest configuration for FastRTC Voice Assistant

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 7.0

# Add options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --durations=10
    --timeout=30

# Markers for test categorization
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (slower, multiple components)
    performance: Performance and benchmark tests
    slow: Slow tests (may take several seconds)
    audio: Tests involving audio processing
    memory: Tests involving memory operations
    llm: Tests involving LLM services
    tts: Tests involving text-to-speech
    stt: Tests involving speech-to-text
    config: Tests involving configuration
    network: Tests requiring network access
    external: Tests requiring external services (Ollama, etc.)

# Async test configuration
asyncio_mode = auto

# Logging configuration for tests
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Capture configuration
log_capture = true
log_level = DEBUG

# Warning filters
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:transformers.*
    ignore::UserWarning:torch.*
    ignore::FutureWarning:numpy.*

# Test timeout (in seconds)
timeout = 30
timeout_method = thread

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml