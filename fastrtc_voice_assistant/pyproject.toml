[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fastrtc-voice-assistant"
version = "1.0.0"
description = "A modular, testable voice assistant system with multilingual support"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "FastRTC Team", email = "team@fastrtc.com"}
]
maintainers = [
    {name = "FastRTC Team", email = "team@fastrtc.com"}
]
keywords = [
    "voice-assistant",
    "speech-recognition", 
    "text-to-speech",
    "multilingual",
    "fastrtc",
    "ai",
    "llm"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    # Core FastRTC dependencies
    "fastrtc[vad,stt,tts,stopword]",
    
    # Audio processing
    "soundfile>=0.12.0",
    "numpy>=1.21.0",
    
    # HTTP and async
    "requests>=2.28.0",
    "aiohttp>=3.8.0",
    "asyncio",
    
    # Memory and embeddings
    "chromadb>=0.4.22",
    "sentence-transformers>=2.2.2",
    "rank_bm25>=0.2.2",
    "mem0ai",
    "qdrant-client",
    
    # LLM and transformers
    "transformers>=4.36.2",
    "fastrtc-whisper-cpp",
    
    # Language detection (NEW for MediaPipe support)
    "mediapipe>=0.10.0",
    
    # Configuration and utilities
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-timeout>=2.1.0",
    
    # Code quality
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
    "pre-commit>=3.0.0",
    
    # Documentation
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
    
    # Development utilities
    "ipython>=8.0.0",
    "jupyter>=1.0.0",
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "factory-boy>=3.2.0",
    "freezegun>=1.2.0",
    "responses>=0.22.0",
    "aioresponses>=0.7.0",
]

docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
    "sphinx-autodoc-typehints>=1.19.0",
]

[project.urls]
Homepage = "https://github.com/fastrtc/voice-assistant"
Documentation = "https://fastrtc-voice-assistant.readthedocs.io/"
Repository = "https://github.com/fastrtc/voice-assistant.git"
"Bug Tracker" = "https://github.com/fastrtc/voice-assistant/issues"
Changelog = "https://github.com/fastrtc/voice-assistant/blob/main/CHANGELOG.md"

[project.scripts]
fastrtc-voice-assistant = "fastrtc_voice_assistant.main:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["fastrtc_voice_assistant*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"fastrtc_voice_assistant" = ["py.typed"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

# mypy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "fastrtc.*",
    "soundfile.*",
    "chromadb.*",
    "sentence_transformers.*",
    "rank_bm25.*",
    "mem0ai.*",
    "qdrant_client.*",
    "mediapipe.*",
]
ignore_missing_imports = true

# pytest configuration (also in pytest.ini for compatibility)
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
    "--durations=10",
]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (slower, multiple components)",
    "performance: Performance and benchmark tests",
    "slow: Slow tests (may take several seconds)",
    "audio: Tests involving audio processing",
    "memory: Tests involving memory operations",
    "llm: Tests involving LLM services",
    "tts: Tests involving text-to-speech",
    "stt: Tests involving speech-to-text",
    "config: Tests involving configuration",
    "network: Tests requiring network access",
    "external: Tests requiring external services",
]
asyncio_mode = "auto"
timeout = 30

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process

# Vulture dead code detection
[tool.vulture]
exclude = ["tests/", "build/", "dist/"]
ignore_decorators = ["@pytest.fixture", "@abstractmethod"]
ignore_names = ["setUp", "tearDown"]
min_confidence = 80