##############################
# Root-Level Docker Compose
# Orchestrates backend, frontend, and optional services
##############################

services:
  # --- Voice Assistant Backend ---
  voice-assistant:
    build:
      context: ./fastrtc_voice_assistant
      dockerfile: ../Dockerfile
    ports:
      - "8080:8080"
      - "8443:8443"
    networks:
      - fastrtc_net
    volumes:
      - config:/workspace/config
      - data:/workspace/data
      - logs:/workspace/logs
      - chroma_db:/workspace/chroma_db
      - models:/workspace/models
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=DEBUG
      - ALLOW_ORIGINS=http://localhost:3005,http://frontend:3005
      - CHROMA_DB_PATH=/workspace/chroma_db
      - STT_BACKEND=faster
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # --- Frontend (React/Vite) ---
  frontend:
    build:
      context: ./frontend/react-vite
      dockerfile: Dockerfile
    networks:
      - fastrtc_net
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://voice-assistant:8080
      - NEXT_PUBLIC_DOCKER=true
    ports:
      - "3005:3005"


  # --- Redis (Required for caching/memory system) ---
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - fastrtc_net
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes



  # --- Ollama (Optional) ---
  ollama:
    profiles: ["ollama"]
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    networks:
      - fastrtc_net
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # --- Prometheus (Optional) ---
  prometheus:
    profiles: ["monitoring"]
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    networks:
      - fastrtc_net
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # --- Grafana (Optional) ---
  grafana:
    profiles: ["monitoring"]
    image: grafana/grafana:latest
    ports:
      - "4000:3000"
    networks:
      - fastrtc_net
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped

  # --- Elasticsearch (Optional) ---
  elasticsearch:
    profiles: ["logging"]
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    networks:
      - fastrtc_net
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped

volumes:
  ollama_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  redis_data:
  config:
  data:
  logs:
  chroma_db:
  models:

networks:
  fastrtc_net:
    driver: bridge